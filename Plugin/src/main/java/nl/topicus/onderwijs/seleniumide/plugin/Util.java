package nl.topicus.onderwijs.seleniumide.plugin;

import java.io.File;
import java.io.IOException;
import java.nio.charset.Charset;
import java.nio.file.Files;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.ListIterator;

import org.apache.commons.io.FileUtils;
import org.apache.commons.io.filefilter.DirectoryFileFilter;
import org.apache.commons.io.filefilter.WildcardFileFilter;
import org.apache.commons.lang3.StringUtils;
import org.apache.maven.plugin.MojoExecutionException;
import org.apache.maven.plugin.logging.Log;

public class Util
{
	public static final String HEADER_COMMENT =
		"// Generated by Selenium IDE to java test maven plug-in version: ";

	private static final String SEPERATOR = System.getProperty("file.separator");

	public static void generateJavaTests(File testcasesSourceDirectory,
			File javaTestsTargetDirectory, File javaTestTemplate, boolean cleanDirectories, Log log)
			throws MojoExecutionException
	{
		if (!testcasesSourceDirectory.isDirectory())
			throw new MojoExecutionException("Invalid testcases source directory.");

		if (!javaTestsTargetDirectory.isDirectory())
			throw new MojoExecutionException("Invalid java test target directory.");

		if (!javaTestTemplate.isFile())
			throw new MojoExecutionException("Invalid java test template file.");

		cleanJavaTests(javaTestsTargetDirectory, cleanDirectories, log);

		try
		{
			Collection<File> testcaseFiles =
				FileUtils.listFiles(testcasesSourceDirectory, new WildcardFileFilter("*.html"),
					DirectoryFileFilter.DIRECTORY);

			log.info("Looking for Selenium IDE testcases at: " + testcasesSourceDirectory);
			log.info("Generated java tests will be stored to: " + javaTestsTargetDirectory);

			log.info("Generating new java test files from " + testcaseFiles.size()
				+ " testcase source files");

			int count = 0;

			for (File file : testcaseFiles)
			{
				List<String> lines = Files.readAllLines(javaTestTemplate.toPath());

				lines.add(0, Util.HEADER_COMMENT
					+ Util.class.getPackage().getImplementationVersion());

				String className =
					StringUtils.capitalize(file.getName().replaceFirst("[.][^.]+$", ""));
				String targetFileName = className + ".java";
				String asoluteSourceParentPath = file.getParent();
				String relativeSourceParentPath =
					asoluteSourceParentPath.replace(testcasesSourceDirectory.getPath() + SEPERATOR,
						"");
				String relativeSourceFilePath =
					relativeSourceParentPath + SEPERATOR + file.getName();
				String asoluteTargetFilePath =
					javaTestsTargetDirectory.getPath() + SEPERATOR + relativeSourceParentPath
						+ SEPERATOR + targetFileName;
				String packageString = relativeSourceParentPath.replace(SEPERATOR, ".");

				for (int i = 0; i < lines.size(); i++)
				{
					lines.set(i, lines.get(i).replace("{package}", packageString));
					lines.set(i, lines.get(i).replace("{className}", className));
					lines.set(
						i,
						lines.get(i).replace("{relativeSourceFilePath}",
							relativeSourceFilePath.replace(SEPERATOR, "/")));
					lines.set(
						i,
						lines.get(i).replace("{asoluteTargetFilePath}",
							asoluteTargetFilePath.replace(SEPERATOR, "/")));
				}

				log.info("Saving java file at: " + asoluteTargetFilePath);

				File targetFile = new File(asoluteTargetFilePath);
				targetFile.getParentFile().mkdirs();
				Files.write(targetFile.toPath(), lines, Charset.forName("UTF-8"));

				Files.copy(file.toPath(),
					new File(asoluteTargetFilePath.replace(".java", ".html")).toPath());

				count++;
			}

			log.info("Generated " + count + " java test files");
		}
		catch (IOException e)
		{
			e.printStackTrace();
		}

	}

	public static void cleanJavaTests(File javaTestsTargetDirectory, boolean cleanDirectories,
			Log log)
	{
		Collection<File> javaTestFiles =
			FileUtils.listFiles(javaTestsTargetDirectory, new WildcardFileFilter("*.java"),
				DirectoryFileFilter.DIRECTORY);

		log.info("Cleaning java tests target directory that contains " + javaTestFiles.size()
			+ " files");

		List<File> emptyDirectories = new ArrayList<>();

		int countDeletedFiles = 0;

		for (File file : javaTestFiles)
		{
			List<String> lines;
			try
			{
				lines = Files.readAllLines(file.toPath());

				if (lines.size() == 0 || !lines.get(0).contains(Util.HEADER_COMMENT))
					continue;

				log.info("Deleting java file at: " + file.getAbsolutePath());
				FileUtils.deleteQuietly(file);

				File htmlFile = new File(file.getAbsolutePath().replace(".java", ".html"));
				log.info("Deleting html file at: " + htmlFile.getAbsolutePath());
				FileUtils.deleteQuietly(htmlFile);

				if (file.getParentFile().list().length == 0)
					emptyDirectories.add(file.getParentFile());

				countDeletedFiles++;
			}
			catch (IOException e)
			{
				e.printStackTrace();
			}
		}

		String cleanDirectoryLog = "";

		if (cleanDirectories)
		{
			int countDeletedDirectories = 0;

			ListIterator<File> emptyDirectoriesIterator = emptyDirectories.listIterator();

			while (emptyDirectoriesIterator.hasNext())
			{
				File emptyDirectory = emptyDirectoriesIterator.next();

				try
				{
					log.info("Deleting empty directory: " + emptyDirectory);
					FileUtils.deleteDirectory(emptyDirectory);
					countDeletedDirectories++;
				}
				catch (IOException e)
				{
					e.printStackTrace();
				}

				File parentDirectory = emptyDirectory.getParentFile();

				if (!parentDirectory.equals(javaTestsTargetDirectory)
					&& parentDirectory.list().length == 0)
				{
					emptyDirectoriesIterator.add(parentDirectory);
					emptyDirectoriesIterator.previous();
				}
			}
			cleanDirectoryLog = " and " + countDeletedDirectories + " empty directories";
		}

		log.info("Cleaned " + countDeletedFiles + " generated java test files" + cleanDirectoryLog);
	}
}
